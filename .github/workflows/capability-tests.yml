name: Build Capability Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Core Infrastructure Capabilities
  core-infrastructure:
    name: ‚öôÔ∏è Core Infrastructure
    runs-on: [self-hosted, windows]
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run Core Infrastructure Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability Core -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: core-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # Web Application Build Support
  webapp-support:
    name: üåê Web Application Support
    runs-on: [self-hosted, windows]
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run Web App Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability WebApp -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: webapp-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # Docker & Container Support
  docker-support:
    name: üê≥ Docker & Container Support
    runs-on: [self-hosted, windows]
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run Docker Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability Docker -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # Mobile Build Support
  mobile-support:
    name: üì± Mobile Build Support
    runs-on: [self-hosted, windows]
    timeout-minutes: 5
    continue-on-error: true  # Mobile support is optional/future

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run Mobile Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability Mobile -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: mobile-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # AI/LLM Build Support
  ai-support:
    name: ü§ñ AI/LLM Build Support
    runs-on: [self-hosted, windows]
    timeout-minutes: 5
    continue-on-error: true  # AI support is optional/future

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run AI/LLM Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability AI -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ai-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # Integration & Workflows
  integration-tests:
    name: üîÑ Integration & Workflows
    runs-on: [self-hosted, windows]
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run Integration Tests
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability Integration -DetailedOutput

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: test-results.xml
          if-no-files-found: ignore

  # Script Validation
  script-validation:
    name: üîç Script Validation
    runs-on: [self-hosted, windows]
    timeout-minutes: 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run PSScriptAnalyzer
        shell: powershell
        run: |
          Write-Host "Installing PSScriptAnalyzer if not present..."
          if (-not (Get-Module -ListAvailable -Name PSScriptAnalyzer)) {
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force -Scope CurrentUser -ErrorAction SilentlyContinue | Out-Null
            Install-Module -Name PSScriptAnalyzer -Force -SkipPublisherCheck -Scope CurrentUser
          }

          Write-Host "Analyzing PowerShell scripts..."
          $scripts = Get-ChildItem -Path .\scripts\, .\config\ -Filter *.ps1 -Recurse
          $errors = @()
          $warnings = @()

          foreach ($script in $scripts) {
            Write-Host "Analyzing: $($script.Name)"
            $results = Invoke-ScriptAnalyzer -Path $script.FullName -Severity Error, Warning
            if ($results) {
              $scriptErrors = $results | Where-Object { $_.Severity -eq 'Error' }
              $scriptWarnings = $results | Where-Object { $_.Severity -eq 'Warning' }

              if ($scriptErrors) {
                $errors += $scriptErrors
                $scriptErrors | Format-Table -AutoSize
              }

              if ($scriptWarnings) {
                $warnings += $scriptWarnings
              }
            }
          }

          if ($warnings.Count -gt 0) {
            Write-Warning "Found $($warnings.Count) warnings (non-blocking)"
          }

          if ($errors.Count -gt 0) {
            Write-Error "Found $($errors.Count) errors in PowerShell scripts"
            exit 1
          }

          Write-Host "All scripts validated successfully! [OK]" -ForegroundColor Green

  # Generate Capability Status Report
  capability-status:
    name: üìä Generate Capability Status
    runs-on: [self-hosted, windows]
    timeout-minutes: 5
    needs: [core-infrastructure, webapp-support, docker-support, mobile-support, ai-support, integration-tests, script-validation]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Pester
        shell: powershell
        run: |
          Install-Module -Name Pester -MinimumVersion 5.0 -Force -SkipPublisherCheck -Scope CurrentUser
          Import-Module Pester -MinimumVersion 5.0 -Force

      - name: Run All Capability Tests & Generate Report
        shell: powershell
        run: |
          & .\scripts\run-tests-by-capability.ps1 -Capability All -CI

      - name: Generate Status Badge Data
        continue-on-error: true
        shell: powershell
        run: |
          if (Test-Path test-capability-status.json) {
            $status = Get-Content test-capability-status.json | ConvertFrom-Json

            Write-Host "`n=== BUILD CAPABILITY STATUS ===" -ForegroundColor Cyan
            Write-Host ""

            foreach ($cap in $status.Capabilities.PSObject.Properties) {
              $data = $cap.Value
              $icon = switch ($data.Status) {
                'Pass' { '‚úì' }
                'Warning' { '‚ö†' }
                'Fail' { '‚úó' }
              }
              $color = switch ($data.Status) {
                'Pass' { 'Green' }
                'Warning' { 'Yellow' }
                'Fail' { 'Red' }
              }

              Write-Host "$icon " -NoNewline -ForegroundColor $color
              Write-Host "$($data.Name): " -NoNewline
              Write-Host "$($data.Passed)/$($data.Total) " -NoNewline
              Write-Host "($($data.PassRate)%)" -ForegroundColor $color
            }

            Write-Host ""
          }

      - name: Upload Capability Status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: capability-status
          path: test-capability-status.json

      - name: Report Overall Status
        shell: powershell
        run: |
          $coreStatus = "${{ needs.core-infrastructure.result }}"
          $webappStatus = "${{ needs.webapp-support.result }}"
          $dockerStatus = "${{ needs.docker-support.result }}"
          $integrationStatus = "${{ needs.integration-tests.result }}"
          $scriptStatus = "${{ needs.script-validation.result }}"

          Write-Host "`n=== JOB STATUS SUMMARY ===" -ForegroundColor Cyan
          Write-Host "‚öôÔ∏è  Core Infrastructure: $coreStatus"
          Write-Host "üåê Web Application Support: $webappStatus"
          Write-Host "üê≥ Docker & Container Support: $dockerStatus"
          Write-Host "üîÑ Integration & Workflows: $integrationStatus"
          Write-Host "üîç Script Validation: $scriptStatus"
          Write-Host "üì± Mobile Build Support: ${{ needs.mobile-support.result }} (optional)"
          Write-Host "ü§ñ AI/LLM Build Support: ${{ needs.ai-support.result }} (optional)"

          # Core capabilities must pass (not optional)
          if ($coreStatus -eq "success" -and $webappStatus -eq "success" -and
              $dockerStatus -eq "success" -and $integrationStatus -eq "success" -and
              $scriptStatus -eq "success") {
            Write-Host "`n‚úì All core build capabilities are functional!" -ForegroundColor Green
            exit 0
          } else {
            Write-Host "`n‚úó Some core capabilities need attention" -ForegroundColor Red
            exit 1
          }
