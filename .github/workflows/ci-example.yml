name: CI Pipeline (Self-Hosted)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Example: .NET Build Job
  dotnet-build:
    runs-on: [self-hosted, windows, dotnet]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --no-restore --configuration Release

      - name: Test
        run: dotnet test --no-build --configuration Release --verbosity normal

      - name: Publish artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: dotnet-build
          path: |
            **/bin/Release/
            !**/obj/

  # Example: Python Test Job
  python-tests:
    runs-on: [self-hosted, windows, python]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
        if: hashFiles('requirements.txt') != ''

      - name: Run tests
        run: pytest tests/ -v --tb=short

      - name: Generate coverage report
        continue-on-error: true
        run: pytest --cov=. --cov-report=xml --cov-report=html
        if: success()

      - name: Upload coverage
        continue-on-error: true
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: coverage-report
          path: htmlcov/

  # Example: Unity Build Job
  unity-build:
    runs-on: [self-hosted, windows, unity]
    if: contains(github.event.head_commit.message, '[unity]') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Cache Unity Library
        continue-on-error: true
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-${{ hashFiles('Assets/**', 'Packages/**', 'ProjectSettings/**') }}
          restore-keys: |
            Library-

      - name: Build Unity Project
        run: |
          # Unity build command (adjust path to your Unity installation)
          & "C:\Program Files\Unity\Hub\Editor\2022.3.15f1\Editor\Unity.exe" `
            -quit -batchmode -nographics `
            -projectPath "$PWD" `
            -buildWindows64Player "Build/Game.exe" `
            -logFile "Build/unity-build.log"

      - name: Upload build logs
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unity-build-logs
          path: Build/*.log

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        if: success()
        with:
          name: unity-build-windows
          path: Build/

  # Example: GPU-Accelerated AI/ML Job
  gpu-inference:
    runs-on: [self-hosted, windows, gpu-cuda]
    if: contains(github.event.head_commit.message, '[gpu]') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python with GPU
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install PyTorch with CUDA
        run: |
          pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121

      - name: Verify GPU availability
        continue-on-error: true
        run: |
          python -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}'); print(f'GPU: {torch.cuda.get_device_name(0) if torch.cuda.is_available() else \"None\"}')"

      - name: Run GPU-accelerated tests
        run: pytest tests/gpu/ -v --tb=short

  # Example: Docker Isolated Job (for untrusted code)
  # Note: Windows runners must use 'docker run' command, not 'container:' key
  docker-isolated:
    runs-on: [self-hosted, windows, docker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run in isolated Docker container
        shell: powershell
        run: |
          # Pull image if not present
          docker pull mcr.microsoft.com/dotnet/sdk:8.0

          # Run in isolated container with resource limits
          docker run --rm `
            --cpus 2 `
            --memory 4g `
            -v "${PWD}:C:\workspace" `
            -w C:\workspace `
            mcr.microsoft.com/dotnet/sdk:8.0 `
            powershell -Command "dotnet --version; Write-Host 'Running in isolated Docker container'"

  # Example: Multi-platform test
  cross-platform-test:
    strategy:
      matrix:
        runner:
          - [self-hosted, windows, python]
          # Add macOS runner when available for iOS builds
          # - [self-hosted, macos, ios]

    runs-on: ${{ matrix.runner }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run cross-platform tests
        run: |
          python --version
          pytest tests/unit/ -v

  # Status check job
  all-checks-passed:
    runs-on: [self-hosted, windows]
    needs: [dotnet-build, python-tests]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          $failed = '${{ contains(needs.*.result, 'failure') }}'
          if ($failed -eq 'true') {
            Write-Error "One or more jobs failed"
            exit 1
          }
          Write-Output "All required jobs passed!"
